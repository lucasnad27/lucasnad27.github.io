{"version":3,"sources":["webpack:///./src/components/Note.js","webpack:///./src/templates/tags.js"],"names":["Note","title","date","path","coverImage","author","excerpt","tags","html","previousNote","nextNote","previousPath","frontmatter","previousLabel","nextPath","nextLabel","className","style","note","noteContent","to","meta","map","tag","toKebabCase","key","fluid","childImageSharp","readMore","dangerouslySetInnerHTML","__html","notesQuery","Tags","data","pageContext","nextPagePath","previousPagePath","notes","allMarkdownRemark","edges","node","id","autoExcerpt"],"mappings":"iOAwFeA,EA/EF,SAAC,GAWP,IAVLC,EAUI,EAVJA,MACAC,EASI,EATJA,KACAC,EAQI,EARJA,KACAC,EAOI,EAPJA,WACAC,EAMI,EANJA,OACAC,EAKI,EALJA,QACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,aACAC,EACI,EADJA,SAEMC,EAAeF,GAAgBA,EAAaG,YAAYT,KACxDU,EAAgBJ,GAAgBA,EAAaG,YAAYX,MACzDa,EAAWL,GAAgBC,EAASE,YAAYT,KAChDY,EAAYL,GAAYA,EAASE,YAAYX,MAEnD,OACE,yBAAKe,UAAWC,IAAMC,MACpB,yBAAKF,UAAWC,IAAME,aACpB,wBAAIH,UAAWC,IAAMhB,OAClBK,EAAU,kBAAC,OAAD,CAAMc,GAAIjB,GAAOF,GAAgBA,GAE9C,yBAAKe,UAAWC,IAAMI,MACnBnB,EADH,IACUG,GAAU,oDAAgBA,GACjCE,EACC,yBAAKS,UAAWC,IAAMV,MACnBA,EAAKe,KAAI,SAAAC,GAAG,OACX,kBAAC,OAAD,CAAMH,GAAE,QAAUI,sBAAYD,GAAtB,IAA+BE,IAAKD,sBAAYD,IACtD,0BAAMP,UAAWC,IAAMM,KAAvB,IAA8BA,QAIlC,MAGLnB,GACC,kBAAC,IAAD,CACEsB,MAAOtB,EAAWuB,gBAAgBD,MAClCV,UAAWC,IAAMb,aAIpBE,EACC,oCACE,2BAAIA,GACJ,kBAAC,OAAD,CAAMc,GAAIjB,EAAMa,UAAWC,IAAMW,UAAjC,gBAKF,oCACE,yBAAKC,wBAAyB,CAAEC,OAAQtB,KACxC,kBAAC,IAAD,CACEG,aAAcA,EACdE,cAAeA,EACfC,SAAUA,EACVC,UAAWA,Q,UClEzB,2CAUA,IAgEagB,EAAU,YAiCRC,UAjGF,SAAC,GAGP,IAFLC,EAEI,EAFJA,KAEI,IADJC,YAAeC,EACX,EADWA,aAAcC,EACzB,EADyBA,iBAAkBb,EAC3C,EAD2CA,IAGjBc,EAC1BJ,EADFK,kBAAqBC,MAGvB,OACE,oCACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,yBAAKvB,UAAU,cAAf,mBACkB,kCAAQO,IAGzBc,EAAMf,KAAI,YAAe,IAAZkB,EAAW,EAAXA,KAEVC,EAWED,EAXFC,GACSC,EAUPF,EAVFlC,QAHqB,EAanBkC,EATF5B,YACEX,EALmB,EAKnBA,MACAC,EANmB,EAMnBA,KACAC,EAPmB,EAOnBA,KACAE,EARmB,EAQnBA,OACAD,EATmB,EASnBA,WACAE,EAVmB,EAUnBA,QACAC,EAXmB,EAWnBA,KAIJ,OACE,kBAAC,EAAD,CACEkB,IAAKgB,EACLxC,MAAOA,EACPC,KAAMA,EACNC,KAAMA,EACNE,OAAQA,EACRE,KAAMA,EACNH,WAAYA,EACZE,QAASA,GAAWoC,OAK1B,kBAAC,IAAD,CACE/B,aAAcyB,EACdvB,cAAc,cACdC,SAAUqB,EACVpB,UAAU","file":"component---src-templates-tags-js-fe3146c5ebe9986af41e.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport Navigation from './navigation'\nimport { toKebabCase } from '../helpers'\n\nimport style from '../styles/note.module.css'\n\nconst Note = ({\n  title,\n  date,\n  path,\n  coverImage,\n  author,\n  excerpt,\n  tags,\n  html,\n  previousNote,\n  nextNote,\n}) => {\n  const previousPath = previousNote && previousNote.frontmatter.path\n  const previousLabel = previousNote && previousNote.frontmatter.title\n  const nextPath = previousNote && nextNote.frontmatter.path\n  const nextLabel = nextNote && nextNote.frontmatter.title\n\n  return (\n    <div className={style.note}>\n      <div className={style.noteContent}>\n        <h1 className={style.title}>\n          {excerpt ? <Link to={path}>{title}</Link> : title}\n        </h1>\n        <div className={style.meta}>\n          {date} {author && <>— Written by {author}</>}\n          {tags ? (\n            <div className={style.tags}>\n              {tags.map(tag => (\n                <Link to={`/tag/${toKebabCase(tag)}/`} key={toKebabCase(tag)}>\n                  <span className={style.tag}>#{tag}</span>\n                </Link>\n              ))}\n            </div>\n          ) : null}\n        </div>\n\n        {coverImage && (\n          <Img\n            fluid={coverImage.childImageSharp.fluid}\n            className={style.coverImage}\n          />\n        )}\n\n        {excerpt ? (\n          <>\n            <p>{excerpt}</p>\n            <Link to={path} className={style.readMore}>\n              Read more →\n            </Link>\n          </>\n        ) : (\n          <>\n            <div dangerouslySetInnerHTML={{ __html: html }} />\n            <Navigation\n              previousPath={previousPath}\n              previousLabel={previousLabel}\n              nextPath={nextPath}\n              nextLabel={nextLabel}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n\nNote.propTypes = {\n  title: PropTypes.string,\n  date: PropTypes.string,\n  path: PropTypes.string,\n  coverImage: PropTypes.object,\n  author: PropTypes.string,\n  excerpt: PropTypes.string,\n  html: PropTypes.string,\n  tags: PropTypes.arrayOf(PropTypes.string),\n  previousNote: PropTypes.object,\n  nextNote: PropTypes.object,\n}\n\nexport default Note\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\nimport Note from '../components/Note'\nimport Navigation from '../components/navigation'\n\nimport '../styles/layout.css'\n\nconst Tags = ({\n  data,\n  pageContext: { nextPagePath, previousPagePath, tag },\n}) => {\n  const {\n    allMarkdownRemark: { edges: notes },\n  } = data\n\n  return (\n    <>\n      <SEO />\n      <Layout>\n        <div className=\"infoBanner\">\n          Notes with tag: <span>#{tag}</span>\n        </div>\n\n        {notes.map(({ node }) => {\n          const {\n            id,\n            excerpt: autoExcerpt,\n            frontmatter: {\n              title,\n              date,\n              path,\n              author,\n              coverImage,\n              excerpt,\n              tags,\n            },\n          } = node\n\n          return (\n            <Note\n              key={id}\n              title={title}\n              date={date}\n              path={path}\n              author={author}\n              tags={tags}\n              coverImage={coverImage}\n              excerpt={excerpt || autoExcerpt}\n            />\n          )\n        })}\n\n        <Navigation\n          previousPath={previousPagePath}\n          previousLabel=\"Newer notes\"\n          nextPath={nextPagePath}\n          nextLabel=\"Older notes\"\n        />\n      </Layout>\n    </>\n  )\n}\n\nTags.propTypes = {\n  data: PropTypes.object.isRequired,\n  pageContext: PropTypes.shape({\n    nextPagePath: PropTypes.string,\n    previousPagePath: PropTypes.string,\n  }),\n}\n\nexport const notesQuery = graphql`\n  query($limit: Int!, $skip: Int!, $tag: String!) {\n    allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM YYYY\")\n            path\n            author\n            excerpt\n            tags\n            coverImage {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tags\n"],"sourceRoot":""}